using Content.Client.Administration.Systems;
using Content.Shared.Administration;
using Content.Shared.Localizations;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Network;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using System.Linq;

namespace Content.Client._Goobstation.Administration.UI.TimeTransferPanel;

[GenerateTypedNameReferences]
public sealed partial class TimeTransferPanel : DefaultWindow
{
    [Dependency] private readonly IGameTiming _gameTiming = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    private readonly SpriteSystem _spriteSystem;
    private readonly AdminSystem _adminSystem;

    public Action<(string player, float time)>? OnTransferMessageSend;
    private TimeSpan? SetButtonResetOn { get; set; }

    public TimeTransferPanel()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _adminSystem = _entityManager.System<AdminSystem>();
        _spriteSystem = _entityManager.System<SpriteSystem>();

        //PlayerOptionButton.OnItemSelected += args => PlayerOptionButton.SelectId(args.Id);
        //JobOptionButton.OnItemSelected += args => JobOptionButton.SelectId(args.Id);

        AddTimeButton.OnButtonUp += OnAddTimeButtonPressed;
        SetTimeButton.OnButtonUp += OnSetTimeButtonPressed;
        GroupCheckbox.OnPressed += OnGroupCheckboxPressed;

        JobSearch.OnTextChanged += OnJobSearchTextChanged;

        PopulateJobs();
        UpdateGroup();
    }

    public void PopulateJobs()
    {
        var jobs = _prototypeManager.EnumeratePrototypes<JobPrototype>()
            .OrderBy(job => job.LocalizedName)
            .ToList();

        for (var i = 0; i < jobs.Count; i++)
        {
            var job = jobs[i];
            var jobEntry = new TimeTransferEntry(job, _spriteSystem, _prototypeManager);
            JobContainer.AddChild(jobEntry);
        }
    }

    public void UpdateFlag(bool hasFlag)
    {
        AddTimeButton.Visible = hasFlag;
        SetTimeButton.Visible = hasFlag;
        WarningLabel.Text = !hasFlag ? Loc.GetString("time-transfer-panel-warning-no-perms") : " ";
        WarningLabel.FontColorOverride = !hasFlag ? Color.Red : Color.LightGreen;
    }

    public void TimeTransferPressed()
    {
        /*var playerId = (NetUserId?) PlayerOptionButton.SelectedMetadata;
        if (playerId == null)
        {
            WarningLabel.FontColorOverride = Color.Red;
            WarningLabel.Text = Loc.GetString("time-transfer-panel-warning-no-player");
            return;
        }*/

        /*var job = (string?) JobOptionButton.SelectedMetadata;
        if (job == null)
        {
            WarningLabel.FontColorOverride = Color.Red;
            WarningLabel.Text = Loc.GetString("time-transfer-panel-warning-no-job");
            return;
        }*/

        var hours = /*UserInputParser.TryFloat(HoursLine.Text, out var parsedHours) ? parsedHours :*/ 0f;
        var minutes = /*UserInputParser.TryFloat(MinutesLine.Text, out var parsedMinutes) ? parsedMinutes :*/ 0f;

        var totalTime = hours * 60 + minutes;
        if (totalTime == 0)
        {
            WarningLabel.FontColorOverride = Color.Red;
            WarningLabel.Text = Loc.GetString("time-transfer-panel-warning-zero-time");
            return;
        }

        WarningLabel.FontColorOverride = Color.LightGreen;
        WarningLabel.Text = Loc.GetString("time-transfer-panel-warning-success");
        OnTransferMessageSend?.Invoke((" ", totalTime));
    }

    public void UpdateGroup()
    {
        GroupTimeLine.Visible = GroupCheckbox.Pressed;

        foreach (var entry in JobContainer.Children)
        {
            if (entry is not TimeTransferEntry jobEntry)
                continue;

            jobEntry.UpdateGroupVisiblity(GroupCheckbox.Pressed);
        }
    }

    public void OnJobSearchTextChanged(LineEdit.LineEditEventArgs args)
    {
        UpdateSearch();
    }

    public void UpdateSearch()
    {
        foreach (var entry in JobContainer.Children)
        {
            if (entry is not TimeTransferEntry jobEntry)
                continue;

            jobEntry.Visible = ShouldShowJob(jobEntry);
        }
    }

    public bool ShouldShowJob(TimeTransferEntry jobEntry)
    {
        return jobEntry.JobName != null && jobEntry.JobName.Contains(JobSearch.Text, StringComparison.OrdinalIgnoreCase);
    }

    public void OnGroupCheckboxPressed(BaseButton.ButtonEventArgs obj)
    {
        UpdateGroup();
    }

    public void OnAddTimeButtonPressed(BaseButton.ButtonEventArgs obj)
    {

    }

    public void OnSetTimeButtonPressed(BaseButton.ButtonEventArgs obj)
    {
        if (SetButtonResetOn is null)
        {
            SetButtonResetOn = _gameTiming.CurTime.Add(TimeSpan.FromSeconds(3));
            SetTimeButton.ModulateSelfOverride = Color.Red;
            SetTimeButton.Text = Loc.GetString("time-transfer-panel-set-time-confirm");
            return;
        }
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_gameTiming.CurTime > SetButtonResetOn)
        {
            SetButtonResetOn = null;
            SetTimeButton.ModulateSelfOverride = null;
            SetTimeButton.Text = Loc.GetString("time-transfer-panel-set-time");
        }
    }
}
