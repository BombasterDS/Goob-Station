using Content.Client.Administration.Systems;
using Content.Shared.Administration;
using Content.Shared.Localizations;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Network;
using Robust.Shared.Player;

namespace Content.Client._Goobstation.Administation.UI.TimeTransferPanel;

[GenerateTypedNameReferences]
public sealed partial class TimeTransferPanel : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;

    private readonly AdminSystem _adminSystem;
    public Action<(NetUserId playerId, string jobId, float time)>? OnTransferMessageSend;

    public TimeTransferPanel()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _adminSystem = _entityManager.System<AdminSystem>();

        PlayerOptionButton.OnItemSelected += args => PlayerOptionButton.SelectId(args.Id);
        JobOptionButton.OnItemSelected += args => JobOptionButton.SelectId(args.Id);

        WarningLabel.Text = "";

        SendButton.OnButtonUp += TimeTransferPressed;

        PopulatePlayers(_adminSystem.PlayerList);
    }

    public void PopulatePlayers(IReadOnlyList<PlayerInfo> players)
    {
        for (var i = 0; i < players.Count; i++)
        {
            var player = players[i];
            PlayerOptionButton.AddItem($"{player.Username}", i);
            PlayerOptionButton.SetItemMetadata(i, player.SessionId);
        }
    }

    public void PopulateJobs(List<string> jobs)
    {
        for (var i = 0; i < jobs.Count; i++)
        {
            var job = jobs[i];
            JobOptionButton.AddItem(job, i);
            JobOptionButton.SetItemMetadata(i, job);
        }
    }

    public void UpdateFlag(bool hasFlag)
    {
        SendButton.Visible = hasFlag;
    }

    public void TimeTransferPressed(BaseButton.ButtonEventArgs obj)
    {
        var playerId = (NetUserId?) PlayerOptionButton.SelectedMetadata;
        if (playerId == null)
        {
            WarningLabel.FontColorOverride = Color.Red;
            WarningLabel.Text = Loc.GetString("time-transfer-panel-warning-no-player");
            return;
        }

        var job = (string?) JobOptionButton.SelectedMetadata;
        if (job == null)
        {
            WarningLabel.FontColorOverride = Color.Red;
            WarningLabel.Text = Loc.GetString("time-transfer-panel-warning-no-job");
            return;
        }

        var hours = UserInputParser.TryFloat(HoursLine.Text, out var parsedHours) ? parsedHours : 0f;
        var minutes = UserInputParser.TryFloat(MinutesLine.Text, out var parsedMinutes) ? parsedMinutes : 0f;

        var totalTime = hours * 60 + minutes;
        if (totalTime == 0)
        {
            WarningLabel.FontColorOverride = Color.Red;
            WarningLabel.Text = Loc.GetString("time-transfer-panel-warning-zero-time");
            return;
        }

        WarningLabel.FontColorOverride = Color.LightGreen;
        WarningLabel.Text = Loc.GetString("time-transfer-panel-warning-success");
        OnTransferMessageSend?.Invoke((playerId.Value, job, totalTime));
    }
}
